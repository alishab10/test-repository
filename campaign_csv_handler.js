//---REQUIRED HEADER---
import fetch from 'node-fetch';
import config from './config.mjs'; //important variables and functions
import inputs from './inputs.mjs'; //inputs sent to the automation
import step_data from './step_data.mjs'; //data generated by previous steps
import file_configs from './file_configs.mjs'; //paths to files uploaded by the user to the automation
let executionLog = ''; //for logging 
//---END REQUIRED HEADER---

function log(msg) {
    const formattedMsg = typeof msg === 'object' ? JSON.stringify(msg) : msg;
    executionLog += formattedMsg + '\n';
}

async function appendToCsvFile() {
    try {
        // Define the filename
        const filename = 'Campaign-Load-test.csv';
        
        // Get the internal skill URL for file storage
        const INTERNAL_SKILL_URL = config.internalSkillsURL;
        const FILESTORAGE_URL = INTERNAL_SKILL_URL + 'filestorage/items';
        const headers = config.pcHeaders();
        
        // First, check if the file exists and get its current content
        log(`Checking if file ${filename} exists...`);
        
        const getFileUrl = `${FILESTORAGE_URL}/${filename}?get_file_contents=true`;
        const getFileResponse = await fetch(getFileUrl, {
            method: 'GET',
            headers: headers
        });
        
        // Parse the user input data
        const userData = inputs.userInput || '';
        log(`User provided data: ${userData}`);
        
        let csvContent = '';
        
        // If the file exists, append to it
        if (getFileResponse.ok) {
            const fileData = await getFileResponse.json();
            log('File exists. Getting current content...');
            
            // Get existing content
            csvContent = fileData.content || '';
            
            // Check if the content already has the header row
            if (!csvContent.includes('UniqueId,ClientId,Phone,Location,FirstName,LastName,ServiceDate,EMail,LastService,LastServicePrice,LastEnhancement,Campaign,Segment')) {
                csvContent = 'UniqueId,ClientId,Phone,Location,FirstName,LastName,ServiceDate,EMail,LastService,LastServicePrice,LastEnhancement,Campaign,Segment\n';
            }
            
            // Append the new data with a newline if needed
            if (!csvContent.endsWith('\n')) {
                csvContent += '\n';
            }
            csvContent += userData;
            
            // Append to the file
            log('Appending data to the file...');
            const appendUrl = `${FILESTORAGE_URL}/${filename}`;
            const appendResponse = await fetch(appendUrl, {
                method: 'PATCH',
                headers: headers,
                body: JSON.stringify({
                    content: csvContent,
                    metadata: 'Updated with new customer data'
                })
            });
            
            await config.handleHttpError(appendResponse, log);
            const appendResult = await config.handleJsonParsing(appendResponse, log);
            
            log(`File updated successfully. URL: ${appendResult.file_url}`);
            return {
                success: true,
                message: 'Data appended to CSV file successfully',
                file_url: appendResult.file_url
            };
        } else {
            // If file doesn't exist, create it
            log('File does not exist. Creating new file...');
            
            // Start with header row and add user data
            csvContent = 'UniqueId,ClientId,Phone,Location,FirstName,LastName,ServiceDate,EMail,LastService,LastServicePrice,LastEnhancement,Campaign,Segment\n';
            csvContent += userData;
            
            const createUrl = `${FILESTORAGE_URL}`;
            const createResponse = await fetch(createUrl, {
                method: 'POST',
                headers: headers,
                body: JSON.stringify({
                    filename: filename,
                    content: csvContent,
                    metadata: 'Customer campaign data',
                    file_links_expire_in_days: '7'
                })
            });
            
            await config.handleHttpError(createResponse, log);
            const createResult = await config.handleJsonParsing(createResponse, log);
            
            log(`File created successfully. URL: ${createResult.file_url}`);
            return {
                success: true,
                message: 'New CSV file created with data',
                file_url: createResult.file_url
            };
        }
    } catch (error) {
        log(`Error: ${error.message}`);
        return {
            success: false,
            error: error.message
        };
    }
}

async function main() {
    return await appendToCsvFile();
}

// Execute the script
config.runScript(main, () => executionLog, 'json');